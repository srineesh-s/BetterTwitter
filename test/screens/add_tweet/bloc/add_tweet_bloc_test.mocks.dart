// Mocks generated by Mockito 5.3.2 from annotations
// in bettertwitter/test/screens/add_tweet/bloc/add_tweet_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bettertwitter/screens/add_tweet/repository/add_tweet_repository.dart'
    as _i4;
import 'package:bettertwitter/services/auth_service.dart' as _i3;
import 'package:bettertwitter/services/firestore_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDbService_0 extends _i1.SmartFake implements _i2.DbService {
  _FakeDbService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthService_1 extends _i1.SmartFake implements _i3.AuthService {
  _FakeAuthService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddTweetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTweetRepository extends _i1.Mock
    implements _i4.AddTweetRepository {
  MockAddTweetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DbService get dbService => (super.noSuchMethod(
        Invocation.getter(#dbService),
        returnValue: _FakeDbService_0(
          this,
          Invocation.getter(#dbService),
        ),
      ) as _i2.DbService);
  @override
  set dbService(_i2.DbService? _dbService) => super.noSuchMethod(
        Invocation.setter(
          #dbService,
          _dbService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.AuthService get authService => (super.noSuchMethod(
        Invocation.getter(#authService),
        returnValue: _FakeAuthService_1(
          this,
          Invocation.getter(#authService),
        ),
      ) as _i3.AuthService);
  @override
  set authService(_i3.AuthService? _authService) => super.noSuchMethod(
        Invocation.setter(
          #authService,
          _authService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> addTweet(String? tweet) => (super.noSuchMethod(
        Invocation.method(
          #addTweet,
          [tweet],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
