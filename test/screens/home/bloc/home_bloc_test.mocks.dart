// Mocks generated by Mockito 5.3.2 from annotations
// in bettertwitter/test/screens/home/bloc/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:bettertwitter/models/tweets/tweet_model.dart' as _i4;
import 'package:bettertwitter/screens/home/repository/home_rep.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamController_0<T> extends _i1.SmartFake
    implements _i2.StreamController<T> {
  _FakeStreamController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i3.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StreamController<List<_i4.TweetModel>> get userStreamController =>
      (super.noSuchMethod(
        Invocation.getter(#userStreamController),
        returnValue: _FakeStreamController_0<List<_i4.TweetModel>>(
          this,
          Invocation.getter(#userStreamController),
        ),
      ) as _i2.StreamController<List<_i4.TweetModel>>);
  @override
  set userStreamController(
          _i2.StreamController<List<_i4.TweetModel>>? _userStreamController) =>
      super.noSuchMethod(
        Invocation.setter(
          #userStreamController,
          _userStreamController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Stream<List<_i4.TweetModel>> get videoDataStream => (super.noSuchMethod(
        Invocation.getter(#videoDataStream),
        returnValue: _i2.Stream<List<_i4.TweetModel>>.empty(),
      ) as _i2.Stream<List<_i4.TweetModel>>);
  @override
  set videoDataStream(_i2.Stream<List<_i4.TweetModel>>? _videoDataStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #videoDataStream,
          _videoDataStream,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Stream<List<_i4.TweetModel>> listenToTweetsRealTime() =>
      (super.noSuchMethod(
        Invocation.method(
          #listenToTweetsRealTime,
          [],
        ),
        returnValue: _i2.Stream<List<_i4.TweetModel>>.empty(),
      ) as _i2.Stream<List<_i4.TweetModel>>);
}
